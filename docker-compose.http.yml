services:
  # Crypto Trading MCP HTTP Bridge
  crypto-mcp-bridge:
    build:
      context: .
      dockerfile: Dockerfile.http
    image: crypto-trading-mcp-http:latest
    container_name: crypto-mcp-bridge
    restart: unless-stopped

    environment:
      # Server configuration
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8080
      - NODE_ENV=${NODE_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}

      # Rate limiting and timeouts
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-1000}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30000}
      - MCP_SERVER_TIMEOUT=${MCP_SERVER_TIMEOUT:-30000}

      # Security features
      - ENABLE_CORS=${ENABLE_CORS:-true}
      - ENABLE_HELMET=${ENABLE_HELMET:-true}
      - ENABLE_COMPRESSION=${ENABLE_COMPRESSION:-true}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:5678,http://127.0.0.1:5678}

      # WebSocket support
      - ENABLE_WEBSOCKET=${ENABLE_WEBSOCKET:-true}
      - MAX_WS_CONNECTIONS=${MAX_WS_CONNECTIONS:-100}

      # Trading configuration
      - DEFAULT_SYMBOL=${DEFAULT_SYMBOL:-BTCUSDT}
      - RISK_PER_TRADE=${RISK_PER_TRADE:-0.02}
      - MIN_CONFIDENCE=${MIN_CONFIDENCE:-0.7}
      - TRADING_MODE=${TRADING_MODE:-swing}
      - MAX_POSITIONS=${MAX_POSITIONS:-3}

      # Binance API (use testnet for safety)
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - BINANCE_TESTNET=${BINANCE_TESTNET:-true}

      # AI configuration
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL:-llama2}
      - AI_ANALYSIS_ENABLED=${AI_ANALYSIS_ENABLED:-true}

      # Data source APIs (optional)
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - NEWS_API_KEY=${NEWS_API_KEY}

      # Database connections (optional)
      - REDIS_URL=redis://redis:6379
      - MONGODB_URI=mongodb://mongo:27017/crypto_trading
      - ENABLE_DATABASE=${ENABLE_DATABASE:-false}

      # Risk management
      - STOP_LOSS_PERCENT=${STOP_LOSS_PERCENT:-0.05}
      - TAKE_PROFIT_RATIO=${TAKE_PROFIT_RATIO:-2.0}
      - MAX_DRAWDOWN=${MAX_DRAWDOWN:-0.15}
      - EMERGENCY_STOP=${EMERGENCY_STOP:-false}

      # Monitoring
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - ENABLE_PAPER_TRADING=${ENABLE_PAPER_TRADING:-true}

    ports:
      - "8080:8080"  # HTTP MCP endpoint
      - "9090:9090"  # Metrics endpoint (optional)

    volumes:
      - ./logs:/app/logs
      - ./http-bridge/.env:/app/.env:ro

    networks:
      - crypto-trading-network

    depends_on:
      - ollama
      - redis

    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Ollama for local AI analysis
  ollama:
    image: ollama/ollama:latest
    container_name: crypto-trader-ollama
    restart: unless-stopped

    volumes:
      - ollama_data:/root/.ollama

    networks:
      - crypto-trading-network

    ports:
      - "11434:11434"

    environment:
      - OLLAMA_HOST=0.0.0.0

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: crypto-trader-redis
    restart: unless-stopped

    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme123}

    volumes:
      - redis_data:/data

    networks:
      - crypto-trading-network

    ports:
      - "6379:6379"

    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-changeme123}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # MongoDB for optional data persistence
  mongo:
    image: mongo:6
    container_name: crypto-trader-mongo
    restart: unless-stopped

    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-changeme123}
      - MONGO_INITDB_DATABASE=crypto_trading

    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro

    networks:
      - crypto-trading-network

    ports:
      - "27017:27017"

    profiles:
      - with-database

    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # n8n for testing MCP integration (optional)
  n8n:
    image: n8nio/n8n:latest
    container_name: crypto-trader-n8n
    restart: unless-stopped

    environment:
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678
      - GENERIC_TIMEZONE=UTC

    ports:
      - "5678:5678"

    volumes:
      - n8n_data:/home/node/.n8n

    networks:
      - crypto-trading-network

    profiles:
      - testing

    depends_on:
      - crypto-mcp-bridge

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-trader-prometheus
    restart: unless-stopped

    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'

    networks:
      - crypto-trading-network

    ports:
      - "9090:9090"

    profiles:
      - monitoring

    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: crypto-trader-grafana
    restart: unless-stopped

    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource

    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro

    networks:
      - crypto-trading-network

    ports:
      - "3000:3000"

    profiles:
      - monitoring

    depends_on:
      - prometheus

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

# Named volumes for data persistence
volumes:
  ollama_data:
    name: crypto_trader_ollama_data
  redis_data:
    name: crypto_trader_redis_data
  mongodb_data:
    name: crypto_trader_mongodb_data
  prometheus_data:
    name: crypto_trader_prometheus_data
  grafana_data:
    name: crypto_trader_grafana_data
  n8n_data:
    name: crypto_trader_n8n_data

# Network for inter-service communication
networks:
  crypto-trading-network:
    name: crypto_trading_network
    driver: bridge