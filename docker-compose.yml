version: '3.8'

services:
  # Main crypto trading client
  crypto-trader:
    build:
      context: .
      dockerfile: Dockerfile
    image: crypto-trading-mcp:latest
    container_name: crypto-trader-main
    restart: unless-stopped

    environment:
      # Trading configuration
      - DEFAULT_SYMBOL=${DEFAULT_SYMBOL:-BTCUSDT}
      - RISK_PER_TRADE=${RISK_PER_TRADE:-0.02}
      - MIN_CONFIDENCE=${MIN_CONFIDENCE:-0.7}
      - TRADING_MODE=${TRADING_MODE:-swing}
      - MAX_POSITIONS=${MAX_POSITIONS:-3}

      # Binance API (use testnet for safety)
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - BINANCE_TESTNET=${BINANCE_TESTNET:-true}

      # AI configuration
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL:-llama2}
      - AI_ANALYSIS_ENABLED=${AI_ANALYSIS_ENABLED:-true}

      # Data source APIs (optional)
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - NEWS_API_KEY=${NEWS_API_KEY}

      # Database connections
      - REDIS_URL=redis://redis:6379
      - MONGODB_URI=mongodb://mongo:27017/crypto_trading
      - ENABLE_DATABASE=${ENABLE_DATABASE:-false}

      # Risk management
      - STOP_LOSS_PERCENT=${STOP_LOSS_PERCENT:-0.05}
      - TAKE_PROFIT_RATIO=${TAKE_PROFIT_RATIO:-2.0}
      - MAX_DRAWDOWN=${MAX_DRAWDOWN:-0.15}
      - EMERGENCY_STOP=${EMERGENCY_STOP:-false}

      # Logging and monitoring
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - ENABLE_PAPER_TRADING=${ENABLE_PAPER_TRADING:-true}

    volumes:
      - ./logs:/app/logs
      - ./client/config.yaml:/app/client/config.yaml:ro

    networks:
      - crypto-trading-network

    depends_on:
      - ollama
      - redis

    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    command: ["python", "client/crypto_trader.py"]

  # Ollama for local AI analysis
  ollama:
    image: ollama/ollama:latest
    container_name: crypto-trader-ollama
    restart: unless-stopped

    volumes:
      - ollama_data:/root/.ollama

    networks:
      - crypto-trading-network

    ports:
      - "11434:11434"

    environment:
      - OLLAMA_HOST=0.0.0.0

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: crypto-trader-redis
    restart: unless-stopped

    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme123}

    volumes:
      - redis_data:/data

    networks:
      - crypto-trading-network

    ports:
      - "6379:6379"

    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-changeme123}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for optional data persistence
  mongo:
    image: mongo:6
    container_name: crypto-trader-mongo
    restart: unless-stopped

    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-changeme123}
      - MONGO_INITDB_DATABASE=crypto_trading

    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro

    networks:
      - crypto-trading-network

    ports:
      - "27017:27017"

    profiles:
      - with-database

    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection (requires monitoring/prometheus.yml)
  # Uncomment when you have monitoring configurations ready
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: crypto-trader-prometheus
  #   restart: unless-stopped
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'
  #   networks:
  #     - crypto-trading-network
  #   ports:
  #     - "9090:9090"
  #   profiles:
  #     - monitoring
  #   healthcheck:
  #     test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Grafana for metrics visualization (requires monitoring/grafana configs)
  # Uncomment when you have monitoring configurations ready
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: crypto-trader-grafana
  #   restart: unless-stopped
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #     - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
  #     - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
  #   networks:
  #     - crypto-trading-network
  #   ports:
  #     - "3000:3000"
  #   profiles:
  #     - monitoring
  #   depends_on:
  #     - prometheus
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Nginx reverse proxy (optional - requires nginx/nginx.conf)
  # Uncomment and configure if you need a reverse proxy
  # nginx:
  #   image: nginx:alpine
  #   container_name: crypto-trader-nginx
  #   restart: unless-stopped
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   networks:
  #     - crypto-trading-network
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   profiles:
  #     - production
  #   depends_on:
  #     - crypto-trader
  #     - grafana

  # Log aggregation with Fluentd (disabled by default - requires logging/fluentd.conf)
  # Uncomment and configure if you need centralized logging
  # fluentd:
  #   image: fluent/fluentd:v1.16-debian
  #   container_name: crypto-trader-logs
  #   restart: unless-stopped
  #   volumes:
  #     - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
  #     - ./logs:/var/log/crypto-trader:ro
  #   networks:
  #     - crypto-trading-network
  #   profiles:
  #     - logging

# Named volumes for data persistence
volumes:
  ollama_data:
    name: crypto_trader_ollama_data
  redis_data:
    name: crypto_trader_redis_data
  mongodb_data:
    name: crypto_trader_mongodb_data
  prometheus_data:
    name: crypto_trader_prometheus_data
  grafana_data:
    name: crypto_trader_grafana_data

# Network for inter-service communication
networks:
  crypto-trading-network:
    name: crypto_trading_network
    driver: bridge