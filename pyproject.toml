[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "crypto-trading-mcp"
version = "1.1.0"
description = "Advanced modular crypto trading system built on the Model Context Protocol (MCP) architecture"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Crypto Trading MCP System", email = "contact@crypto-trading-mcp.com"}
]
maintainers = [
    {name = "Crypto Trading MCP System", email = "contact@crypto-trading-mcp.com"}
]
keywords = [
    "cryptocurrency",
    "trading",
    "mcp",
    "model-context-protocol",
    "automated-trading",
    "binance",
    "technical-analysis",
    "ai-trading",
    "risk-management"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
requires-python = ">=3.9"
dependencies = [
    "aiohttp>=3.10.11",
    "pydantic>=2.9.2",
    "structlog>=24.4.0",
    "backoff>=2.2.1",
    "tenacity>=9.0.0",
    "cryptography>=43.0.1",
    "numpy>=2.1.1",
    "pandas>=2.2.3",
    "python-dateutil>=2.9.0.post0",
    "PyYAML>=6.0.2",
    "websockets>=13.1",
    "aiofiles>=24.1.0",
    "asyncio-throttle>=1.0.2",
    "ccxt>=4.4.16",
    "python-dotenv>=1.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "black>=24.8.0",
    "isort>=5.13.2",
    "flake8>=7.1.1",
    "mypy>=1.11.2",
    "ruff>=0.6.9",
    "pre-commit>=3.8.0",
]
test = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "httpx>=0.27.2",
    "pytest-mock>=3.14.0",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.39",
    "mkdocstrings[python]>=0.26.1",
]
analysis = [
    "feedparser>=6.0.11",
    "beautifulsoup4>=4.12.3",
    "textblob>=0.18.0",
    "vaderSentiment>=3.3.2",
    "transformers>=4.45.2",
    "torch>=2.4.1",
]
all = [
    "crypto-trading-mcp[dev,test,docs,analysis]"
]

[project.urls]
Homepage = "https://github.com/your-org/crypto-trading-mcp"
Repository = "https://github.com/your-org/crypto-trading-mcp.git"
Documentation = "https://github.com/your-org/crypto-trading-mcp/docs"
"Bug Tracker" = "https://github.com/your-org/crypto-trading-mcp/issues"
Changelog = "https://github.com/your-org/crypto-trading-mcp/blob/main/CHANGELOG.md"

[project.scripts]
crypto-trader = "client.crypto_trader:main"
mcp-server-news = "servers.crypto_news_mcp.main:main"
mcp-server-technical = "servers.crypto_technical_mcp.main:main"
mcp-server-social = "servers.crypto_social_mcp.main:main"
mcp-server-binance = "servers.binance_mcp.main:main"
mcp-server-risk = "servers.crypto_risk_mcp.main:main"
mcp-server-ai = "servers.crypto_ai_mcp.main:main"

[tool.setuptools.packages.find]
include = ["client*", "servers*", "shared*"]
exclude = ["tests*", "docs*", "http-bridge*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.env.example"]

# Development tool configurations
[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | http-bridge
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
extend_skip_glob = ["http-bridge/*"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "^http-bridge/",
    "^build/",
    "^dist/",
]

[[tool.mypy.overrides]]
module = [
    "ccxt.*",
    "feedparser.*",
    "textblob.*",
    "vaderSentiment.*",
    "transformers.*",
    "torch.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py39"
line-length = 120
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "S",   # flake8-bandit (security)
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected (allow for tests)
    "S603",  # subprocess call without shell=True (we use shell=False)
    "S607",  # starting a process with a partial executable path
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "http-bridge",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert statements in tests

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=client",
    "--cov=servers",
    "--cov=shared",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["client", "servers", "shared"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/http-bridge/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]